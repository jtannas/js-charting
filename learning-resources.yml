Resources:
  - name: jQuery Website
    address: http://jquery.com/
    notes:
      - Good for installation instructions
      - Gives very basic introduction to jQuery
  - name: Oh shit, git!
    address: http://ohshitgit.com/
    notes:
      - Colourful but but plain language instructions on how to fix mistakes in git
  - name: Eslint Getting Started guide
    address: https://eslint.org/docs/user-guide/getting-started
    notes:
      - I wasted time by not following the instructions and trying to install
        eslint globally. This was a bad idea.
  - name: Zapier's 'An Introduction to APIs'
    address: https://zapier.com/learn/apis/
    notes:
      - Good for demystifying APIs
    chapters:
      - number: 1
        name: Introduction to APIs
        notes:
        - APIs are for computer-to-computer communication
        - The client sends requests, the server runs the API and responds to requests
      - number: 2
        name: Protocols
        notes:
        - they are commonly run over the http/https protocols
        - The request header consists of a the Url, the method, the header, and the body
        - The response header consists of a status code, the header, and the body
        - The common API methods are Get, Post, Put, and Delete
      - number: 3
        name: Data Formats
        notes:
          - JSON and XML are the most common data formats in APIs
          - >
            Which data format is specified in the header via the 'content-type'
            property (eg. Content-Type: Application/JSON)"
          - The request header can contain a propert for 'Accept' to specify which
            content-type the responses can be.
          - If the server is unable to respond in the 'Accept' format,
            it responds with an error
      - number: 4
        name: Authentication, Part 1
        notes:
          - Basic Authentication is the classic username and password way of
            authenticating users
          - It has a shortcoming of using the same credentials to manage the
            account as to use the API
          - API keys were conceived as a way around this
          - API keys are strings uniquely associated to an account
          - API Keys are often associated with a given set of permissions
          - They can be given and revoked without affecting the overall account(s)
            that they are bound to
          - They are commonly passed to the server via the URL, less commonly in
            the request header
      - number: 5
        name: Authentication, Part 2
        notes:
          - OAuth aims to automate much of the process of obtaining an API key
          - OAuth Actors:
            - User: The person setting up the API interface between two websites
            - Client: The API Client
            - Server: The API Server
          - OAuth2 Steps:
            - User tells the client to connect to the server
            - The client redirects the user to the server, along with a callback URL
            - The server authenticates the user
            - The server provides the user with an authorization code (in the background)
              and redirects them back to the callback URL
            - The client receives the authorization code and, together with it's
              own secret API key, makes a request for an access token to the server
            - The server uses the secret key to confirm the client identity and the
              authorization code to confirm the user identity
            - The server gives the client an Access Token so the client can access
              the server API on behalf of the user.
          - How OAuth1 differs:
            - The client has to request a 'request token' as part of the initial
              redirecting of the user to the server. This request token is then
              used as part of the request for the Access Token.
            - OAuth1 requests must be digitally signed to prevent tampering.
              OAuth2 lets HTTPS take care of this.
            - OAuth2 supports time-limited tokens that expire.
              OAuth1 does not.
            - OAuth2 also supports 'scope' which limits the permissions of a given
              Access Token. This allows limiting what clients can do.
      - number: 6
        name: API Design
        notes:
          Architectural Styles:
            SOAP: >
              Formerly meaning "Simple Object Access Protocol", it is an XML based
              design with a focus on messaging and standard structures for requests
              and responses.
            ReST: >
              Meaning 'Representational State Transfer', it is an open design with
              a focus on manipulating resources and is based around conventions and
              idempotency.
          Design Steps:
            - Decide what resources should be available
            - Assign URLs to those resources
            - Decide what actions the client should be able to perform on those
              resources (i.e. what methods)
            - Decide what information is needed from the client for each of those actions
          ReST design:
            - Plurals of resource names are for accessing lists or for creating new
              instances (e.g. <website>/orders/)
            - These can be followed by the primary key for details or for actions on
              a single resource (e.g. <website>/orders/<pkey>)
            - There are mixed opinions on how to handle foreign keys
              (e.g. <website>/customers/<customer_id>/orders/<order_id> vs adding the
              customer_id as a required request parameter)
            - URL endpoints can be followed by a query string to filter the results
              (e.g. <website>/orders?(size=large|size=medium)&price>15  )
            - ReST APIs should also support pagination to break up the results into
              smaller sets (e.g. <website>/orders?page=2&size=200  )
        homework:
          - Subject: The Instagram API
            Questions:
              - Question: What resources does Instagram make available?
                Answer:
                  - Users
                  - Relationships
                  - Media
                  - Comments
                  - Likes
                  - Tags
                  - Locations
              - Question: What is unique identifier for users?
                Answer: user-id
              - Question: "For the endpoint users, self, media, and liked, what is the
                name of the parameter that limits the number of media results returned?"
                Answer: count
          - Subject: The Facebook API
            Questions:
              - Question: What 3 terms does Facebook use to describe what the Graph API
                          is composed of?
                Answer: ['nodes', 'edges', 'fields']
              - Question: What does 'me' in the /me endpoint translate to as a convenience?
                Answer: It translates to the user_id of the current user
          - Subject: The Twitter API
            Questions:
              - Question: What 4 resources, referred to as "objects", does Twitter make
                          available?
                Answer: ['Tweet', 'User', 'Entities', 'Extended Entities']
              - Question: What parameter is required to create a new favorite?
                Answer: The numerical ID of the Tweet to like
      - number: 7
        name: Real-Time Communication
        notes:
          Integrations:
            - APIs allow systems to share information
            - An example is deleting an email on your phone and then having it disappear
              on your desktop view soon after
            - These are known as integrations
          Client-Driven Integration:
            - This is when the actions are being performed on the client side and
              then sent to the server
            - An example is sending an email from your computer-to-computer
            - Only a single request is needed, since the client is initiating the action
          Server-Driven Integration:
            - This is when the actions are being performed on the server
            - The client doesn't necessarily know when the actions are being taken
            - An example is when you receive an email on your email server
            - There are a few techniques for updating the client:
                Polling: The client repeatedly asks for the resource. This is inefficient
                  though, since frequent requests are needed to reduce the delay between
                  server and client updates. This sucks up bandwidth and CPU time.
                Long Polling: This is a variation of polling, where the server doesn't
                  respond to a request for the updated resource until the resource actually
                  changes. That way, bandwidth and CPU time is conserved. Though better than
                  polling, it still has a problem in that it requires the client and server
                  to maintain an open connection.
                Webhooks: The problem with the above methods is that the client is the
                  only one making requests. Webhooks allow the server to make requests
                  to the client with the updated reources. This effectively makes
                  both sides act as both clients and servers. The client provides the
                  server with a callback URL that it is listening to for requests, then
                  the server communicates updates to that adddress. This is not always
                  possible though due to CPU & connection constraints (eg. in smartphones).
                Subscription Webhooks: These are an extension on to webhooks to help
                  automate the process. The client sends the a request to the server
                  for updates along with a callback URL to send them to. The server
                  acknowledges the request, the waits for updates to occur. When updates
                  occur, the server sends them along like in a regular webhook.
      - number: 8
        name: Implementation
        notes:
          - A client program implements an API when it follows the API's rules in
            making requests to that API.
          - A server implements the API by listening to requests to the API and
            responding appropriately.
          - Along with the server software, it is common to publish documentation
            of the rules for interacting with the API as a client.
          - There are a few ways to interact with an API:
              HTTP Clients: These are generic programs for building up http requests
                by inputting the information. They're slow and manual, but very
                flexible and transparent. This makes them good for testing and
                experimentation.
              Code: This is the meat of what APIs are built for - computer-to-computer
                communication. For popular APIs, there tend to be ready made libraries
                for accessing them. If not, generic requests libraries can be used
                instead.
              Wrappers: Certain applications (eg. Zapier) wrap generic HTTP clients
                to provide added functionality and support. They don't do anything
                new, but are useful for people who don't have the technical skillset
                to interact with APIs with code.
  - name: Build Node.js RESTful APIs in 10 Minutes
    address: https://www.codementor.io/olatundegaruba/nodejs-restful-apis-in-10-minutes-q0sgsfhbd
    notes:
      - Followed along building a node API (saved on github as hello-API)
      - It seems like a good place to start for forking pieces for a RESTful API
      - This is beyond what I need for the project though - I only need a local API
  - name: How to Create Node.js Modules
    address: https://docs.npmjs.com/getting-started/creating-node-modules
  - name: Creating and Publishing a node.js module
    address: https://quickleft.com/blog/creating-and-publishing-a-node-js-module/
  - name: Vertical Bar Graph
    address: https://foundation.zurb.com/building-blocks/blocks/bar-graph.html
    notes:
      - Used as inspiration for the HTML & CSS aspect of the project
      - Doesn't include any javascript, so I'm free to build the API however I feel like
  - name: Stack Overflow Helped with jQuery Calls
    address: https://stackoverflow.com/questions/47964992/no-effect-from-calling-jquery-method-from-its-function-object
    notes:
      - I learned more about javascript & it's use of the 'this' keyword from this
      - It let me refactor to make a generic object builder instead of a chart builder
      - Now I can use it to make the charts
  - name: Inheritance and the Prototype Chain
    address: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Inheritance_and_the_prototype_chain
    notes:
      - Helped me figure out object oriented programming for javascript
  - name: Flexbox Froggy
    address: http://flexboxfroggy.com/
    notes:
      - I learned css flexboxes from this a few weeks ago
      - I used it to refresh my knowledge for how to make the bar graph
  - name: Css Grid Garden
    address: http://cssgridgarden.com/
  - name: JSDoc Website
    address: http://usejsdoc.org/
  - name: W3 Schools Css
    address: https://www.w3schools.com/css/default.asp
  - name: Stack Overflow
    address: https://stackoverflow.com/
    notes:
      - I cannot overstate just how much I lean on stack overflow for ideas


